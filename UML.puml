@startuml UML

' Paquete principal
package "models" {
    abstract class Servicio {
        - int numero
        + abstract double calcularCosto()
    }

    class Impresion extends Servicio {
        - String color
        - List<Imagen> imagenes
        - CostoStrategy costoStrategy
        + void agregarImagen(Imagen imagen)
        + double calcularCosto()
        + void setColor(String color)
        + String getColor()
        + void setCostoStrategy(CostoStrategy costoStrategy)
    }

    class Fotografia extends Servicio {
        - String tipoFotografia
        - int cantidadFotos
        - CostoStrategy costoStrategy
        + double calcularCosto()
        + void setTipoFotografia(String tipoFotografia)
        + String getTipoFotografia()
        + void setCostoStrategy(CostoStrategy costoStrategy)
    }

    class Pedido {
        - Cliente cliente
        - List<Servicio> servicios
        + void agregarServicio(Servicio servicio)
        + double calcularTotal()
        + List<Servicio> getServicios()
    }

    class Cliente {
        - String cedula
        - String nombre
        + String getCedula()
        + String getNombre()
    }

    class Imagen {
        - String nombre
        + String getNombre()
    }
}

' Paquete de patrones de diseño
package "patterns.strategy" {
    interface CostoStrategy {
        + double calcularCosto()
    }

    class CostoImpresionStrategy implements CostoStrategy {
        + double calcularCosto()
    }

    class CostoFotografiaStrategy implements CostoStrategy {
        + double calcularCosto()
    }
}

package "patterns.factory" {
    abstract class ServicioFactory {
        + abstract Servicio crearServicio()
    }

    class ImpresionFactory extends ServicioFactory {
        + Impresion crearImpresion()
    }

    class FotografiaFactory extends ServicioFactory {
        + Fotografia crearFotografia()
    }
}

package "patterns.facade" {
    class ServicioFacade {
        - Pedido pedido
        - ServicioFactory impresionFactory
        - ServicioFactory fotografiaFactory
        + ServicioFacade(Cliente cliente, ServicioFactory impresionFactory, ServicioFactory fotografiaFactory)
        + void agregarImpresion(String color, String... imagenes)
        + void agregarFotografia(String tipoFotografia, int cantidadFotos)
        + double calcularCostoTotal()
        + Pedido getPedido()
    }
}

' Relaciones
Servicio <|-- Impresion
Servicio <|-- Fotografia
Pedido *-- Cliente : composición
Pedido *-- Servicio : composición
Impresion *-- Imagen : composición
Impresion --> CostoStrategy : dependencia
Fotografia --> CostoStrategy : dependencia
CostoStrategy <|.. CostoImpresionStrategy
CostoStrategy <|.. CostoFotografiaStrategy
ServicioFacade *-- Pedido : composición
ServicioFacade --> ServicioFactory : dependencia
ServicioFactory <|-- ImpresionFactory
ServicioFactory <|-- FotografiaFactory

@enduml