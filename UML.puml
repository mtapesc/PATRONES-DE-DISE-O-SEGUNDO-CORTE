@startuml UML

skinparam linetype ortho
skinparam classAttributeIconSize 0

' Interfaz ServicioFactory (Patrón Factory Method)
interface ServicioFactory {
    + Servicio crearServicio()
}

' Fábricas concretas que implementan ServicioFactory
class ImpresionFactory {
    + Impresion crearServicio()
}

class FotografiaFactory {
    + Fotografia crearServicio()
}

' Interfaz CostoStrategy (Patrón Strategy)
interface CostoStrategy {
    + double calcularCosto()
}

' Estrategias concretas que implementan CostoStrategy
class CostoImpresionStrategy {
    + double calcularCosto()
}

class CostoFotografiaStrategy {
    + double calcularCosto()
}

' Clase abstracta Servicio
abstract class Servicio {
    - int numero
    + abstract double calcularCosto()
}

' Clases concretas que heredan de Servicio
class Impresion {
    - String color
    - List<Imagen> imagenes
    - CostoStrategy costoStrategy
    + void agregarImagen(Imagen imagen)
    + double calcularCosto()
    + void setColor(String color)
    + String getColor()
    + void setCostoStrategy(CostoStrategy costoStrategy)
}

class Fotografia {
    - String tipoFotografia
    - int cantidadFotos
    - CostoStrategy costoStrategy
    + double calcularCosto()
    + void setTipoFotografia(String tipoFotografia)
    + String getTipoFotografia()
    + void setCostoStrategy(CostoStrategy costoStrategy)
}

' Clase Pedido (Gestión de servicios)
class Pedido {
    - Cliente cliente
    - List<Servicio> servicios
    + void agregarServicio(Servicio servicio)
    + double calcularTotal()
    + List<Servicio> getServicios()
}

' Clase Cliente (Entidad básica)
class Cliente {
    - String cedula
    - String nombre
    + String getCedula()
    + String getNombre()
}

' Clase Imagen (Entidad básica)
class Imagen {
    - String nombre
    + String getNombre()
}

' Clase ServicioFacade (Patrón Facade)
class ServicioFacade {
    - Pedido pedido
    - ServicioFactory impresionFactory
    - ServicioFactory fotografiaFactory
    + ServicioFacade(Cliente cliente, ServicioFactory impresionFactory, ServicioFactory fotografiaFactory)
    + void agregarImpresion(String color, String imagen1, String imagen2)
    + void agregarFotografia(String tipoFotografia, int cantidadFotos)
    + double calcularCostoTotal()
    + Pedido getPedido()
}

' Relaciones
ServicioFactory <|.. ImpresionFactory
ServicioFactory <|.. FotografiaFactory
CostoStrategy <|.. CostoImpresionStrategy
CostoStrategy <|.. CostoFotografiaStrategy
Servicio <|-- Impresion
Servicio <|-- Fotografia
Pedido *-- Cliente
Pedido *-- Servicio
Impresion *-- Imagen
Impresion --> CostoStrategy
Fotografia --> CostoStrategy
ServicioFacade *-- Pedido
ServicioFacade --> ServicioFactory

@enduml